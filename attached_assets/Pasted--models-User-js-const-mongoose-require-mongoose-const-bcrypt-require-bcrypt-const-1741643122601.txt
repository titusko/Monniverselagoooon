// models/User.js
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    minlength: 3,
    maxlength: 30
  },
  email: {
    type: String,
    required: true,
    unique: true,
    trim: true
  },
  password: {
    type: String,
    required: true,
    minlength: 6
  },
  walletAddress: {
    type: String,
    unique: true,
    sparse: true
  },
  profileComplete: {
    type: Boolean,
    default: false
  },
  xp: {
    type: Number,
    default: 0
  },
  level: {
    type: Number,
    default: 1
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  socials: {
    twitter: String,
    discord: String,
    youtube: String,
    facebook: String
  },
  completedTasks: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Task'
  }],
  completedQuests: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Quest'
  }]
}, {
  timestamps: true
});

// Hash password before saving
userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  
  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (error) {
    next(error);
  }
});

// Method to compare password
userSchema.methods.comparePassword = async function(candidatePassword) {
  return await bcrypt.compare(candidatePassword, this.password);
};

const User = mongoose.model('User', userSchema);
module.exports = User;

// models/Task.js
const mongoose = require('mongoose');

const taskSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
    trim: true
  },
  description: {
    type: String,
    required: true
  },
  rewardXP: {
    type: Number,
    required: true,
    default: 10
  },
  rewardTokens: {
    amount: {
      type: Number,
      default: 0
    },
    tokenAddress: String
  },
  taskType: {
    type: String,
    enum: ['social', 'learning', 'contribution', 'partnership'],
    required: true
  },
  verificationMethod: {
    type: String,
    enum: ['manual', 'automatic', 'blockchain'],
    default: 'manual'
  },
  verificationData: {
    url: String,
    contractAddress: String,
    functionName: String,
    params: [String]
  },
  isActive: {
    type: Boolean,
    default: true
  },
  startDate: {
    type: Date,
    default: Date.now
  },
  endDate: {
    type: Date
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  partnerId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Partner'
  },
  completedBy: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }]
}, {
  timestamps: true
});

const Task = mongoose.model('Task', taskSchema);
module.exports = Task;

// models/Quest.js
const mongoose = require('mongoose');

const questSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
    trim: true
  },
  description: {
    type: String,
    required: true
  },
  tasks: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Task'
  }],
  rewardXP: {
    type: Number,
    required: true,
    default: 50
  },
  rewardTokens: {
    amount: {
      type: Number,
      default: 0
    },
    tokenAddress: String
  },
  isActive: {
    type: Boolean,
    default: true
  },
  startDate: {
    type: Date,
    default: Date.now
  },
  endDate: {
    type: Date
  },
  onChainId: {
    type: Number
  },
  maxParticipants: {
    type: Number
  },
  currentParticipants: {
    type: Number,
    default: 0
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  partnerId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Partner'
  },
  completedBy: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }]
}, {
  timestamps: true
});

const Quest = mongoose.model('Quest', questSchema);
module.exports = Quest;

// models/Partner.js
const mongoose = require('mongoose');

const partnerSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true
  },
  description: {
    type: String,
    required: true
  },
  walletAddress: {
    type: String,
    required: true
  },
  logo: {
    type: String
  },
  website: {
    type: String
  },
  socials: {
    twitter: String,
    discord: String,
    telegram: String
  },
  isActive: {
    type: Boolean,
    default: true
  },
  onChainId: {
    type: Number
  },
  tasks: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Task'
  }],
  quests: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Quest'
  }]
}, {
  timestamps: true
});

const Partner = mongoose.model('Partner', partnerSchema);
module.exports = Partner;

// models/UserTaskProgress.js
const mongoose = require('mongoose');

const userTaskProgressSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  taskId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Task',
    required: true
  },
  status: {
    type: String,
    enum: ['started', 'completed', 'verified', 'rejected'],
    default: 'started'
  },
  startTime: {
    type: Date,
    default: Date.now
  },
  completionTime: {
    type: Date
  },
  verificationData: {
    type: String
  },
  rewardClaimed: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});

const UserTaskProgress = mongoose.model('UserTaskProgress', userTaskProgressSchema);
module.exports = UserTaskProgress;