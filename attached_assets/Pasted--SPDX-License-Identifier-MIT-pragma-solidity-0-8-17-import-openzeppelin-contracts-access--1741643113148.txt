// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract MonniversePartnership is Ownable {
    struct Partner {
        address partnerAddress;
        string name;
        string description;
        bool isActive;
        uint256 createdAt;
    }
    
    struct Partnership {
        uint256 id;
        address partnerAddress;
        string title;
        string description;
        uint256 rewardPool;
        address rewardToken;
        bool isActive;
        uint256 startTime;
        uint256 endTime;
    }
    
    // Partner address => Partner data
    mapping(address => Partner) public partners;
    
    // Partnership ID => Partnership data
    mapping(uint256 => Partnership) public partnerships;
    
    // Array of all partner addresses
    address[] public partnerAddresses;
    
    uint256 private nextPartnershipId = 1;
    
    event PartnerAdded(address indexed partnerAddress, string name);
    event PartnershipCreated(uint256 indexed partnershipId, address indexed partnerAddress, string title);
    event PartnershipFunded(uint256 indexed partnershipId, uint256 amount);
    
    // Add a new partner
    function addPartner(address _partnerAddress, string memory _name, string memory _description) external onlyOwner {
        require(_partnerAddress != address(0), "Invalid address");
        require(partners[_partnerAddress].partnerAddress == address(0), "Partner already exists");
        
        partners[_partnerAddress] = Partner({
            partnerAddress: _partnerAddress,
            name: _name,
            description: _description,
            isActive: true,
            createdAt: block.timestamp
        });
        
        partnerAddresses.push(_partnerAddress);
        
        emit PartnerAdded(_partnerAddress, _name);
    }
    
    // Create a new partnership
    function createPartnership(
        string memory _title,
        string memory _description,
        address _rewardToken,
        uint256 _startTime,
        uint256 _endTime
    ) external returns (uint256) {
        require(partners[msg.sender].isActive, "Caller is not an active partner");
        require(_startTime < _endTime, "Invalid time range");
        
        uint256 partnershipId = nextPartnershipId;
        nextPartnershipId++;
        
        partnerships[partnershipId] = Partnership({
            id: partnershipId,
            partnerAddress: msg.sender,
            title: _title,
            description: _description,
            rewardPool: 0,
            rewardToken: _rewardToken,
            isActive: true,
            startTime: _startTime,
            endTime: _endTime
        });
        
        emit PartnershipCreated(partnershipId, msg.sender, _title);
        return partnershipId;
    }
    
    // Fund a partnership with tokens
    function fundPartnership(uint256 _partnershipId, uint256 _amount) external {
        Partnership storage partnership = partnerships[_partnershipId];
        
        require(partnership.id != 0, "Partnership does not exist");
        require(partnership.partnerAddress == msg.sender, "Only the partner can fund");
        require(partnership.isActive, "Partnership is not active");
        
        IERC20 token = IERC20(partnership.rewardToken);
        require(token.transferFrom(msg.sender, address(this), _amount), "Transfer failed");
        
        partnership.rewardPool += _amount;
        
        emit PartnershipFunded(_partnershipId, _amount);
    }
    
    // Deactivate a partnership
    function deactivatePartnership(uint256 _partnershipId) external {
        Partnership storage partnership = partnerships[_partnershipId];
        
        require(partnership.id != 0, "Partnership does not exist");
        require(partnership.partnerAddress == msg.sender || owner() == msg.sender, "Not authorized");
        
        partnership.isActive = false;
    }
    
    // Owner can deactivate a partner
    function deactivatePartner(address _partnerAddress) external onlyOwner {
        require(partners[_partnerAddress].partnerAddress != address(0), "Partner does not exist");
        partners[_partnerAddress].isActive = false;
    }
    
    // Get all partners
    function getAllPartners() external view returns (address[] memory) {
        return partnerAddresses;
    }
    
    // Distribute rewards (to be called by admin based on off-chain completion data)
    function distributeRewards(uint256 _partnershipId, address[] memory _recipients, uint256[] memory _amounts) external onlyOwner {
        Partnership storage partnership = partnerships[_partnershipId];
        
        require(partnership.id != 0, "Partnership does not exist");
        require(_recipients.length == _amounts.length, "Arrays length mismatch");
        
        uint256 totalAmount = 0;
        for (uint256 i = 0; i < _amounts.length; i++) {
            totalAmount += _amounts[i];
        }
        
        require(totalAmount <= partnership.rewardPool, "Insufficient reward pool");
        
        IERC20 token = IERC20(partnership.rewardToken);
        
        for (uint256 i = 0; i < _recipients.length; i++) {
            token.transfer(_recipients[i], _amounts[i]);
            partnership.rewardPool -= _amounts[i];
        }
    }
}