// routes/auth.js
const router = require('express').Router();
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const auth = require('../middleware/auth');

// Register a new user
router.post('/register', async (req, res) => {
  try {
    const { username, email, password } = req.body;
    
    // Check if user already exists
    const existingUser = await User.findOne({ $or: [{ email }, { username }] });
    if (existingUser) {
      return res.status(400).json({ message: 'User already exists' });
    }
    
    // Create new user
    const newUser = new User({
      username,
      email,
      password
    });
    
    await newUser.save();
    
    // Generate JWT token
    const token = jwt.sign(
      { id: newUser._id },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );
    
    res.status(201).json({
      token,
      user: {
        id: newUser._id,
        username: newUser.username,
        email: newUser.email,
        xp: newUser.xp,
        level: newUser.level,
        profileComplete: newUser.profileComplete
      }
    });
    
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Login user
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // Find user by email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }
    
    // Check password
    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }
    
    // Generate JWT token
    const token = jwt.sign(
      { id: user._id },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );
    
    res.status(200).json({
      token,
      user: {
        id: user._id,
        username: user.username,
        email: user.email,
        xp: user.xp,
        level: user.level,
        profileComplete: user.profileComplete,
        walletAddress: user.walletAddress
      }
    });
    
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get user data
router.get('/user', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    res.status(200).json(user);
    
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Update user profile
router.put('/user', auth, async (req, res) => {
  try {
    const { username, email, walletAddress, socials } = req.body;
    
    // Check if username or email is already taken
    if (username || email) {
      const existingUser = await User.findOne({
        $or: [
          { username, _id: { $ne: req.user.id } },
          { email, _id: { $ne: req.user.id } }
        ]
      });
      
      if (existingUser) {
        return res.status(400).json({ message: 'Username or email already taken' });
      }
    }
    
    // Update user profile
    const updatedUser = await User.findByIdAndUpdate(
      req.user.id,
      {
        $set: {
          ...(username && { username }),
          ...(email && { email }),
          ...(walletAddress && { walletAddress }),
          ...(socials && { socials }),
          profileComplete: true
        }
      },
      { new: true }
    ).select('-password');
    
    res.status(200).json(updatedUser);
    
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;

// routes/tasks.js
const router = require('express').Router();
const Task = require('../models/Task');
const UserTaskProgress = require('../models/UserTaskProgress');
const User = require('../models/User');
const auth = require('../middleware/auth');
const adminAuth = require('../middleware/adminAuth');

// Get all active tasks
router.get('/', async (req, res) => {
  try {
    const tasks = await Task.find({ isActive: true })
      .populate('partnerId', 'name logo')
      .sort({ createdAt: -1 });
    
    res.status(200).json(tasks);
    
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get task by ID
router.get('/:id', async (req, res) => {
  try {
    const task = await Task.findById(req.params.id)
      .populate('partnerId', 'name logo website socials')
      .populate('createdBy', 'username');
    
    if (!task) {
      return res.status(404).json({ message: 'Task not found' });
    }
    
    res.status(200).json(task);
    
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Create a new task (admin only)
router.post('/', adminAuth, async (req, res) => {
  try {
    const {
      title,
      description,
      rewardXP,
      rewardTokens,
      taskType,
      verificationMethod,
      verificationData,
      startDate,
      endDate,
      partnerId
    } = req.body;
    
    const newTask = new Task({
      title,
      description,
      rewardXP,
      rewardTokens,
      taskType,
      verificationMethod,
      verificationData,
      startDate,
      endDate,
      partnerId,
      createdBy: req.user.id
    });
    
    await newTask.save();
    
    res.status(201).json(newTask);
    
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Update a task (admin only)
router.put('/:id', adminAuth, async (req, res) => {
  try {
    const task = await Task.findById(req.params.id);
    
    if (!task) {
      return res.status(404).json({ message: 'Task not found' });
    }
    
    const updatedTask = await Task.findByIdAndUpdate(
      req.params.id,
      { $set: req.body },
      { new: true }
    );
    
    res.status(200).json(updatedTask);
    
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Start a task
router.post('/:id/start', auth, async (req, res) => {
  try {
    const task = await Task.findById(req.params.id);
    
    if (!task) {
      return res.status(404).json({ message: 'Task not found' });
    }
    
    if (!task.isActive) {
      return res.status(400).json({ message: 'This task is no longer active' });
    }
    
    // Check if user has already started this task
    const existingProgress = await UserTaskProgress.findOne({
      userId: req.user.id,
      taskId: task._id
    });
    
    if (existingProgress) {
      return res.status(400).json({ message: 'You have already started this task' });
    }
    
    // Create new task progress
    const newProgress = new UserTaskProgress({
      userId: req.user.id,
      taskId: task._id,
      status: 'started'
    });
    
    await newProgress.save();
    
    res.status(200).json(newProgress);
    
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Submit task completion
router.post('/:id/complete', auth, async (req, res) => {
  try {
    const { verificationData } = req.body;
    
    const task = await Task.findById(req.params.id);
    
    if (!task) {
      return res.status(404).json({ message: 'Task not found' });
    }
    
    // Find user's progress for this task
    const progress = await UserTaskProgress.findOne({
      userId: req.user.id,
      taskId: task._id
    });
    
    if (!progress) {
      return res.status(400).json({ message: 'You have not started this task yet' });
    }
    
    if (progress.status === 'completed' || progress.status === 'verified') {
      return res.status(400).json({ message: 'You have already completed this task' });
    }
    
    // Update progress
    progress.status = 'completed';
    progress.completionTime = Date.now();
    progress.verificationData = verificationData;
    await progress.save();
    
    // If verification method is automatic, verify immediately
    if (task.verificationMethod === 'automatic') {
      // Implement automatic verification logic here
      // For now, just mark as